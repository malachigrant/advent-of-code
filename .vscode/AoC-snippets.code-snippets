{
	// Place your advent-of-code workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create a day File": {
		"scope": "javascript,typescript",
		"prefix": "createday",
		"body": [
			"import { readNumberInput, readInput } from '../helpers/index.js';",
			"",
			"export function part1(fileName) {",
			"  const arr = readInput(fileName);",
			"  $0",
			"}",
			"",
			"export function part2(fileName) {",
			"  const arr = readInput(fileName);",
			"",
			"}",
		]
	},
	"Create a Test File": {
		"scope": "javascript,typescript",
		"prefix": "createtest",
		"body": [
			"import { part1, part2 } from '../days/day${1:<num>}.js';",
			"",
			"describe('day$1', () => {",
			"  it('part 1 returns ${2:test-value}', () => {",
			"    expect(part1('test/$1.input')).toBe(${2:test-value});",
			"  });",
			"",
			"  it('part 2 returns ${3:test-value}', () => {",
			"    expect(part2('test/$1.input')).toBe(${3:test-value});",
			"  })",
			"});",
		]
	}
}